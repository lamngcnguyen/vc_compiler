import java_cup.runtime.*;

parser code {:
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right+1));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal java.lang.String IDENTIFIER;

terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL;


// Keywords
terminal BOOLEAN;
terminal BREAK;
terminal CONTINUE;
terminal ELSE;
terminal FOR;
terminal FLOAT;
terminal IF;
terminal INT;
terminal RETURN;
terminal VOID;
terminal WHILE;

// Operators
// Arithmetic
terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
// Relational
terminal GT;
terminal LT;
terminal LTEQ;
terminal GTEQ;
// Equality
terminal EQEQ;
terminal NOTEQ;
// Logical
terminal ANDAND;
terminal OROR;
terminal NOT;
// Assignment
terminal EQ;
terminal PLUSPLUS; //Unary plus
terminal MINUSMINUS; //Unary minus

//Seperators
terminal LPAREN;
terminal RPAREN;
terminal LBRACE;
terminal RBRACE;
terminal LBRACK;
terminal RBRACK;
terminal SEMICOLON;
terminal COMMA;

non terminal literal;
non terminal goal;

start with goal;

goal ::= literal
    ;

literal ::= INTEGER_LITERAL
    |   FLOATING_POINT_LITERAL
    |   BOOLEAN_LITERAL
    |   CHARACTER_LITERAL
    |   STRING_LITERAL
    ;